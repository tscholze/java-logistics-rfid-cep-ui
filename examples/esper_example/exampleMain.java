/*
 * Visualisierung eines RFID-Scanners
 * Copyright (C) 2012  ss12rfid-Team
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package examples.esper_example;

import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.SimpleLayout;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;

import com.espertech.esper.client.*;
import java.util.Random;
import java.util.Date;

/*
To test you have to import all the *.jar except
the AlienRFID.jar files in the resources directory
*/

public class exampleMain {

    public static class Tick {
    	// It has three properties:
    	// a symbol name (say "AAPL" for Apples stock),
    	// a price and a time stamp. 
        String symbol;
        Double price;
        Date timeStamp;

        public Tick(String s, double p, long t) {
            symbol = s;
            price = p;
            timeStamp = new Date(t);
        }
        public double getPrice() {
        	return price;
        }
        public String getSymbol() {
        	return symbol;
        }
        public Date getTimeStamp() {
        	return timeStamp;
        }

        @Override
        public String toString() {
            return "Symbol:" + symbol + " Price: "
            + price.toString() + " time: " 
            + timeStamp.toString();
        }
    }
    
	// generates random ticks, and throw them down the pipe to the CEP engine
    private static Random generator = new Random();

    public static void GenerateRandomTick(EPRuntime cepRT) {
        double price = (double) generator.nextInt(10);
        long timeStamp = System.currentTimeMillis();
        String symbol = "AAPL";
        Tick tick = new Tick(symbol, price, timeStamp);
        System.out.println("Sending tick:" + tick);
        cepRT.sendEvent(tick);

    }
    private static Random generator1 = new Random();

    public static void GenerateRandomTick1(EPRuntime cepRT) {
        double price = (double) generator1.nextInt(10);
        long timeStamp = System.currentTimeMillis();
        String symbol = "SSAL";
        Tick tick = new Tick(symbol, price, timeStamp);
        System.out.println("Sending tick:" + tick);
        cepRT.sendEvent(tick);

    }
    
    public static class CEPListener implements UpdateListener {

        public void update(EventBean[] newData, EventBean[] oldData) {
            System.out.println("RULE ACTIVATED: " + newData[0].getUnderlying());
        }
    }

    public static void main(String[] args) {
    	// Log4j workaround
    	SimpleLayout layout = new SimpleLayout();
    	ConsoleAppender appender = new ConsoleAppender(new SimpleLayout());
    	Logger.getRootLogger().addAppender(appender);
    	Logger.getRootLogger().setLevel((Level) Level.WARN);
    	//The Configuration is meant only as an initialization-time object.
        Configuration cepConfig = new Configuration();
        // Now we have a working CEP engine and a fake data feed, 
        // it is time to create our first rule, or in the Esper 
        // parlance, our first EPL statement. 
        cepConfig.addEventType("StockTick", Tick.class.getName());
        EPServiceProvider cep = EPServiceProviderManager.getProvider("myCEPEngine", cepConfig);
        EPRuntime cepRT = cep.getEPRuntime();

        EPAdministrator cepAdm = cep.getEPAdministrator();
        // heres the rule:
        // Here, an event in the form of a stock tick will 
        // be triggered every time the average over the 
        // last 2 ticks is above the value of 6.0. 
        EPStatement cepStatement = cepAdm.createEPL("select * from " +
                "StockTick(symbol='AAPL').win:length(2) " +
                "having price > 6.0");
        EPStatement cepStatement1 = cepAdm.createEPL("select * from " +
        		"StockTick(symbol='SSAL').win:length(2) " +
        		"having price > 3.0");
        // creating a listener and connect it to 
        // the events generated by our selection rule
        cepStatement.addListener(new CEPListener());
        cepStatement1.addListener(new CEPListener());

       // We generate a few ticks...
        for (int i = 0; i < 50; i++) {
            GenerateRandomTick(cepRT);
            GenerateRandomTick1(cepRT);
        }
    }
}

